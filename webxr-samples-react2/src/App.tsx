import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import WebXRSupport from './components/WebXRSupport';
import SampleList from './components/SampleList';
import ImmersiveVRSession from './components/ImmersiveVRSession';
import ImmersiveARSession from './components/ImmersiveARSession';
import Photo360 from './components/Photo360';
import StereoVideo from './components/StereoVideo';
import PositionalAudio from './components/PositionalAudio';
import SpectatorMode from './components/SpectatorMode';
import SolarSystemAR from './components/SolarSystemAR';
import './App.css';

const samples = [
  { title: 'Immersive VR Session', category: 'Basics',
    path: '/immersive-vr',
    description: 'Demonstrates use of an "immersive-vr" XRSession to present a WebGL scene on a VR headset.' },
  { title: 'Immersive AR Session', category: 'Basics',
    path: '/immersive-ar',
    description: 'Demonstrates use of an "immersive-ar" XRSession to present a WebGL scene on an AR-enabled phone or headset.' },
  { title: 'Solar System AR', category: 'AR Examples',
    path: '/solar-system-ar',
    description: 'Interactive solar system model in augmented reality.' },
  { title: 'Inline Session', category: 'Basics',
    path: 'inline-session.html',
    description: 'Demonstrates use of an "inline" XRSession to present the same WebGL scene on the page and on an XR device.' },
  { title: 'Reduced-Bind Rendering', category: 'Performance',
    path: 'reduced-bind-rendering.html',
    description: 'Demonstrates a technique to reduce the number of state changes made while rendering.' },
  { title: 'Room Scale', category: 'Basics',
    path: 'room-scale.html',
    description: 'Demonstrates using a "local-floor" reference space to provide room scale tracking.' },
  { title: 'Input Tracking', category: 'Input',
    path: 'input-tracking.html',
    description: 'Demonstrates basic tracking and rendering of XRInputSources.'},
  { title: 'Input Profiles', category: 'Input',
    path: 'input-profiles.html',
    description: 'Demonstrates loading appropriate controller models based on the XRInputSources profiles array.'},
  { title: 'Input Selection', category: 'Input',
    path: 'input-selection.html',
    description: 'Demonstrates handling \'select\' events generated by XRInputSources.'},
  { title: 'Controller State', category: 'Input',
    path: 'controller-state.html',
    description: 'Demonstrates responding to controller state from an XRInputSource\'s gamepad attribute.'},
  { title: 'Hand Tracking', category: 'Input',
    path: 'immersive-hands.html',
    description: 'Demonstrates using the Hand Tracking API to track the user\'s hands.'},
  { title: 'Framebuffer Scaling', category: 'Performance',
    path: 'framebuffer-scaling.html',
    description: 'Demonstrates scaling a layer\'s framebuffer to statically control performance or quality.' },
  { title: 'Viewport Scaling', category: 'Performance',
    path: 'viewport-scaling.html',
    description: 'Demonstrates dynamcially scaling a layer\'s viewport to control performance at the expense of quality.' },
  { title: '360 Stereo Photos', category: 'Content',
    path: '/360-photos',
    description: 'Demonstrates displaying a 360 degree equirectangular stereo photo.' },
  { title: 'Stereo Video', category: 'Content',
    path: '/stereo-video',
    description: 'Demonstrates playing stereo videos.' },
  { title: 'Positional Audio', category: 'Content',
    path: '/positional-audio',
    description: 'Demonstrates playing audio that sounds as if it originates at a specific point in the space.' },
  { title: 'Spectator Mode', category: 'Advanced Techniques',
    path: '/spectator-mode',
    description: 'Demonstrates rendering a 3rd person view of the scene to an external monitor.' },
  { title: 'Teleportation', category: 'Advanced Techniques',
    path: 'teleportation.html',
    description: 'Demonstrates teleporting the viewer around the scene with getOffsetReferenceSpace().'},
  { title: 'Anchors', category: 'AR Basics',
    path: 'anchors.html',
    description: 'Demonstrates using the Anchors API to place virtual objects in real-world locations.'},
  { title: 'Hit Test', category: 'AR Basics',
    path: 'hit-test.html',
    description: 'Demonstrates using the Hit Test API to place virtual objects on real-world surfaces.'},
  { title: 'Hit Test with Anchors', category: 'AR Basics',
    path: 'hit-test-anchors.html',
    description: 'Demonstrates using the Hit Test API together with the Anchors API to place virtual objects on real-world surfaces.'},
  { title: 'Barebones VR', category: 'No Dependencies',
    path: 'vr-barebones.html',
    description: 'Extremely simple use of "immersive-vr" sessions with no library dependencies. Doesn\'t render anything exciting.',
    noPolyfill: true },
  { title: 'Barebones AR', category: 'No Dependencies',
    path: 'ar-barebones.html',
    description: 'Extremely simple use of "immersive-ar" sessions with no library dependencies. Doesn\'t render anything exciting.',
    noPolyfill: true }
];

function App() {
  const [hasWebXRSupport, setHasWebXRSupport] = useState(false);

  return (
    <Router>
      <div className="container">
        <header className="header">
          <div id="nav">
            <Link to="/" className="selected">Samples</Link>
            <a href="layers-samples/">Layers Samples</a>
            <a href="webgpu/">WebGPU Samples</a>
            <a href="proposals/">Proposals</a>
            <a href="tests/">Test Pages</a>
            <a href="report/">Report</a>
          </div>

          <h1>
            <Link to="/" className="wordmark">
              <img src="/media/logo/webxr-logo.svg" alt="WebXR Logo"/>
            </Link>
          </h1>
          <h2 className="tagline">Sample Pages</h2>
        </header>

        <main className="main">
          <Routes>
            <Route path="/" element={
              <>
                <WebXRSupport onSupportChecked={setHasWebXRSupport} />
                <p>
                  <b>Sample pages demonstrating how to use various aspects of the WebXR API.</b>
                  <br/>
                  <a href="explainer.html">Learn More</a>
                </p>
                {hasWebXRSupport && <SampleList samples={samples} />}
              </>
            } />
            <Route path="/immersive-vr" element={<ImmersiveVRSession />} />
            <Route path="/immersive-ar" element={<ImmersiveARSession />} />
            <Route path="/solar-system-ar" element={<SolarSystemAR />} />
            <Route path="/360-photos" element={<Photo360 />} />
            <Route path="/stereo-video" element={<StereoVideo />} />
            <Route path="/positional-audio" element={<PositionalAudio />} />
            <Route path="/spectator-mode" element={<SpectatorMode />} />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

export default App;
